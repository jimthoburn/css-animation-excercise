
/*
-----------------------------------------------
Make Luigi‚Äôs Mansion extra spooky! üè∞ üëª

* Check out the finished example:
https://codepen.io/jimthoburn/full/ZMzVOW/

* Learn about the CSS animation properties:
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations

* Read up on the CSS transform property, which is useful for keyframes:
https://developer.mozilla.org/en-US/docs/Web/CSS/transform

*/


/*
-----------------------------------------------
STEP 1: Create keyframes to make the ghosts move up and down.

You can move a ghost up or down with ‚ÄútranslateY‚Äù

For example‚Ä¶
transform: translateY(10%)
transform: translateY(-10%)
*/

@keyframes levitate {
  0% {
    /* Move up */
 
    /* translateY( ‚Ä¶ ) */
  }
  100% {
    /* Move down */
 
    /* translateY( ‚Ä¶ ) */
  }
}


/*
-----------------------------------------------
STEP 2: Apply your keyframes to the ghosts.

You can do this with the ‚Äúanimation-name‚Äù property.

For example:
animation-name: levitate;

You won‚Äôt notice a difference until you add an ‚Äúanimation-duration‚Äù. We‚Äôll do that in the next step‚Ä¶
*/

.ghost {
  /*
  Apply your keyframes to the ghosts.
  */
}


/*
-----------------------------------------------
STEP 3: Choose how fast the ghosts should move.

With the ‚Äúanimation-duration‚Äù property, you can choose the length of time it takes to play through the keyframes.

For example:
animation-duration: 2s;
animation-duration: 0.5s;
*/

.ghost {
  /*
  Choose how fast the ghosts should move.
  */
}


/*
-----------------------------------------------
STEP 4: Choose how many times the animation should play.

Here are some examples:
animation-iteration-count: 3
animation-iteration-count: infinite
*/

.ghost {
  /*
  Choose how many times the animation should play.
  */
}


/*
-----------------------------------------------
STEP 5: Pick a direction for the animation.

For example:
animation-direction: alternate
animation-direction: reverse
*/

.ghost {
  /*
  Pick a direction for the animation.
  */
}


/*
-----------------------------------------------
STEP 6: Animate the shadows

You can use ‚Äúscale‚Äù to make an element shrink or grow.

For example:
transform: scale(0.5)
transform: scale(1.5)
*/

@keyframes shrink-and-grow {
  0% 
    /* Grow */{
  }
  100% {
    /* Shrink */
  }
}

.shadow {
  /*
  animation-name
  animation-duration
  animation-iteration-count
  animation-direction
  */
}


/*
-----------------------------------------------
STEP 7: Let‚Äôs make the ghosts levitate at different times from each other.

You can do this with the ‚Äúanimation-delay‚Äù property, which makes an animation play earlier or later than normal.

For example:
animation-delay: 3s
animation-delay: -0.5s
*/

.ghost-1 {
  /* delay for ghost 1 */
}
.shadow-1 {
  /* delay for ghost 1 */
}

.ghost-2 {
  /* delay for ghost 2 */
}
.shadow-2 {
  /* delay for ghost 2 */
}

.ghost-3 {
  /* delay for ghost 3 */
}
.shadow-3 {
  /* delay for ghost 3 */
}


/*
-----------------------------------------------
BONUS POINTS: Make the ghosts levitate more naturally (or supernaturally!) by adjusting the animation timing function.

For example:
animation-timing-function: linear
animation-timing-function: ease-in
animation-timing-function: ease-in-out
*/

.ghost {
  /* Make animation look more natural */
}
.shadow {
  /* Make animation look more natural */
}


/*
-----------------------------------------------
NOTE: If your animation feels jumpy when it first starts, you might need to choose an ‚Äúanimation-fill-mode‚Äù:

For example:
animation-fill-mode: forwards
animation-fill-mode: backwards
animation-fill-mode: both

More details:
https://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-mode
*/

.ghost {
  /* Avoid jumpyness */
}
.shadow {
  /* Avoid jumpyness */
}


/*
-----------------------------------------------
You‚Äôre all done!

* Check out the finished example:
https://codepen.io/jimthoburn/pen/ZMzVOW

* Learn about the CSS animation properties:
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations

* Read up on the CSS transform property, which is useful for keyframes:
https://developer.mozilla.org/en-US/docs/Web/CSS/transform

*/



/*
-----------------------------------------------
Here are more styles that arrange the type, mansion and ghosts‚Ä¶
*/
html {
  height: 100%;
}
body {
  min-height: 100%;
}

html, body {
  font-family: "Press Start 2P", "Helvetica Neue", Helvetica, sans-serif;
}
body {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-content: center;
  align-items: center;
  text-align: center;
  padding: 1.5em;
  margin: 0;
}
h1 {
  margin: 0;
}
figure {
  position: relative;
}
figure img {
  display: block;
}
.ghost {
  position: absolute;
  z-index: 1;
  /*filter: invert(100%);*/
}
.shadow {
  background-color: rgb(116, 95, 221);
  border-radius: 50%;
  width: 30px;
  height: 15px;

  position: absolute;
}

.ghost-1 {
  top: 340px;
  left: 400px;
}
.shadow-1 {
  top: 400px;
  left: 410px;
}

.ghost-2 {
  top: 415px;
  left: 620px;
}
.shadow-2 {
  top: 475px;
  left: 630px;
}

.ghost-3 {
  top: 390px;
  left: 130px;
}
.shadow-3 {
  top: 450px;
  left: 140px;
}

.eye {
  background-color: rgb(219, 66, 66);
  display: block;
  width: 20px;
  height: 30px;
  position: absolute;
  top: 240px;
}

.eye--left {
  left: 370px;
}
.eye--right {
  left: 410px;
}

@keyframes blink {
  0% {
    height: 0;
  }
  37.5% {
    height: 0;
  }
  38% {
    height: 30px;
  }
  38.5% {
    height: 0;
  }
  99.5% {
    height: 0;
  }
  100% {
    height: 30px;
  }
}

.eye {
  animation-name: blink;
  animation-duration: 30s;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
  animation-direction: alternate;
  animation-fill-mode: both;
}

.orb {
  display: block;
  width: 14px;
  height: 14px;
  border-radius: 50%;
  background: white;
  position: absolute;
}

.orb-1 {
  top: 484px;
  left: 263px;
}
.orb-2 {
  top: 302px;
  left: 149px;
}
.orb-3 {
  top: 358px;
  left: 635px;
}

@keyframes glow {
  0% {
    opacity: 0;
  }
  62.5% {
    opacity: 0;
  }
  67.5% {
    opacity: 1;
  }
  100% {
    opacity: 1;
  }
}


.orb {
  animation-name: glow;
  animation-duration: 9s;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
  animation-direction: alternate;
  animation-fill-mode: both;
}


.orb-2 {
  animation-delay: 0s;
}
.orb-3 {
  animation-delay: -1.5s;
}
.orb-1 {
  animation-delay: -7.5s;
}

